from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from utils.constants import STAR_TO_RUBLE, ADMIN_IDS, ALLOWED_TO_ADMIN_PANEL_IDS
from utils.database import Database
import os
import hmac
import json
import hashlib
import requests
import uuid
from datetime import datetime

router = Router(name='shop')
db = Database()

class ShopStates(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_username = State()
    waiting_for_stars = State()
    waiting_for_payment = State()

PAYMENT_DETAILS = """
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:        

üá∑üá∫ –†–æ—Å—Å–∏—è (RUB)
‚ÇΩ 2200700636880774
‚Ç¨ 2200701918386050

üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (KZT)
‚Ç∏ 5269880009919101
"""

@router.callback_query(F.data == "buy_stars")
async def start_buy_stars(callback: CallbackQuery, state: FSMContext):
    try:
        # if not callback.from_user.id in ADMIN_IDS:
        #     await callback.answer("–ü–æ–∫–∞-—á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)
        #     return
        
        await callback.answer()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–±–µ", callback_data="buy_for_self")],
            [InlineKeyboardButton(text="–î—Ä—É–≥—É", callback_data="buy_for_friend")]
        ])
        
        await callback.message.answer("‚ú® –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã?", reply_markup=keyboard)
        await state.set_state(ShopStates.waiting_for_recipient)
    except Exception as e:
        print(f"Error in start_buy_stars: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(ShopStates.waiting_for_recipient, F.data == "buy_for_self")
async def buy_for_self(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        if not callback.from_user.username:
            await callback.message.answer("‚ö†Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!")
            await state.clear()
            return
        
        username = callback.from_user.username
        await state.update_data(target_username=username)
        
        await callback.message.answer(f"‚ú® –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Å–µ–±—è (@{username}).\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (50 - 100000):")
        await state.set_state(ShopStates.waiting_for_stars)
    except Exception as e:
        print(f"Error in buy_for_self: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(ShopStates.waiting_for_recipient, F.data == "buy_for_friend")
async def buy_for_friend(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await callback.message.answer("‚ú® –í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username:")
        await state.set_state(ShopStates.waiting_for_username)
    except Exception as e:
        print(f"Error in buy_for_friend: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(ShopStates.waiting_for_username)
async def process_friend_username(message: Message, state: FSMContext):
    try:
        username = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username
        if not username.startswith('@') or len(username) < 2:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
            return
        
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
        username = username[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not all(c.isalnum() or c == '_' for c in username):
            await message.answer("‚ùå Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è")
            return
        
        await state.update_data(target_username=username)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_username")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_purchase")]
        ])
        
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}. –í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=keyboard)
    except Exception as e:
        print(f"Error in process_friend_username: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(ShopStates.waiting_for_username, F.data == "confirm_username")
async def confirm_username(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        data = await state.get_data()
        username = data.get('target_username')
        
        if not username:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        await callback.message.answer(f"‚ú® –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –∑–≤–µ–∑–¥—ã –¥–ª—è @{username}.\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (50 - 100000):")
        await state.set_state(ShopStates.waiting_for_stars)
    except Exception as e:
        print(f"Error in confirm_username: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == "cancel_purchase")
async def cancel_purchase(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.message(ShopStates.waiting_for_stars)
async def process_stars_amount(message: Message, state: FSMContext):
    try:
        stars = int(message.text)
        if stars < 50 or stars > 100000:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥ –æ—Ç 50 –¥–æ 100000.")
            return
            
        rubles = round(stars * STAR_TO_RUBLE, 2)
        
        data = await state.get_data()
        target_username = data.get('target_username')
        
        await state.update_data(stars=stars, rubles=rubles)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = f"order_{message.from_user.id}_{int(datetime.now().timestamp())}"
        await state.update_data(order_id=order_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ –°–ë–ü", callback_data="pay_sbp")],
            [InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="pay_card")]
        ])
        
        await message.answer(
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {rubles} RUB\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{target_username}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥.")
    except Exception as e:
        print(f"Error in process_stars_amount: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "pay_sbp")
async def pay_with_sbp(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        data = await state.get_data()
        stars = data.get('stars')
        rubles = data.get('rubles')
        target_username = data.get('target_username')
        order_id = data.get('order_id')
        
        if not stars or not rubles or not target_username or not order_id:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Lava Pay –∏–∑ .env
        secret_key = os.getenv("LAVA_SECRET_KEY", "51372c3ef4b5bcefb07c3d0237675258f9088a1a")
        shop_id = os.getenv("LAVA_SHOP_ID", "e9a3cee7-e740-4422-a0c1-4fba8f7652b9")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        payment_data = {
            "sum": rubles,
            "orderId": order_id,
            "shopId": shop_id,
            "comment": f"–ü–æ–∫—É–ø–∫–∞ {stars} –∑–≤–µ–∑–¥ –¥–ª—è @{target_username}"
        }
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        json_str = json.dumps(payment_data)
        json_bytes = json_str.encode()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        sign = hmac.new(
            bytes(secret_key, 'UTF-8'),
            json_bytes,
            hashlib.sha256
        ).hexdigest()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Lava API
        headers = {
            'Signature': sign,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
        
        response = requests.post(
            'https://api.lava.ru/business/invoice/create',
            data=json_bytes,
            headers=headers
        )
        
        response_data = response.json()
        print(f"Lava API response: {response_data}")
        
        if response.status_code == 200 and response_data.get('status_check'):
            payment_url = response_data.get('data', {}).get('url')
            
            await state.update_data(payment_method="–°–ë–ü (Lava Pay)")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="check_payment")]
            ])
            
            await callback.message.answer(
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {rubles} RUB\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{target_username}\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n\n"
                f"‚úÖ –ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª",
                reply_markup=keyboard
            )
            
            await state.set_state(ShopStates.waiting_for_payment)
        else:
            print(f"Lava API error: {response_data}")
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –°–ë–ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
            )
    except Exception as e:
        print(f"Error in pay_with_sbp: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "pay_card")
async def pay_with_card(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        data = await state.get_data()
        stars = data.get('stars')
        rubles = data.get('rubles')
        target_username = data.get('target_username')
        
        if not stars or not rubles or not target_username:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        await state.update_data(payment_method="–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="check_payment")]
        ])
        
        await callback.message.answer(
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {rubles} RUB\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{target_username}\n\n{PAYMENT_DETAILS}\n\n"
            f"‚úÖ –ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª",
            reply_markup=keyboard
        )
        
        await state.set_state(ShopStates.waiting_for_payment)
        
    except Exception as e:
        print(f"Error in pay_with_card: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(ShopStates.waiting_for_payment, F.data == "check_payment")
async def check_payment(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        data = await state.get_data()
        stars = data.get('stars')
        rubles = data.get('rubles')
        target_username = data.get('target_username')
        order_id = data.get('order_id')
        payment_method = data.get('payment_method', "–ù–µ —É–∫–∞–∑–∞–Ω")
        
        if not stars or not rubles or not target_username:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        user_id = str(callback.from_user.id)
        user = db.get_user(user_id)
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            await state.clear()
            return
            
        db_order_id = db.create_order(user['id'], stars, rubles, "pending")
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"approve_payment_{db_order_id}_{target_username}_{user_id}"),
                InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_payment_{db_order_id}_{user_id}")
            ],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§", url=f"tg://user?id={user_id}")]
        ])
        
        admin_message = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥!\n\n"
            f"üë§ –û—Ç: {callback.from_user.mention_html()}\n"
            f"üÜî ID: {user_id}\n"
            f"üìù Username –∑–∞–∫–∞–∑—á–∏–∫–∞: @{callback.from_user.username}\n"
            f"üìù Username –ø–æ–ª—É—á–∞—Ç–µ–ª—è: @{target_username}\n"
            f"‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars}\n"
            f"üí∞ –°—É–º–º–∞: {rubles} RUB\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
            f"üßæ ID –∑–∞–∫–∞–∑–∞: {order_id}"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await callback.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    reply_markup=admin_keyboard,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"Failed to notify admin {admin_id}: {e}")
        
        await callback.message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "üí´ –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞."
        )
        await state.clear()
        
    except Exception as e:
        print(f"Error in check_payment: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("approve_payment_"))
async def approve_payment(callback: CallbackQuery):
    try:
        if not callback.from_user or callback.from_user.id not in ALLOWED_TO_ADMIN_PANEL_IDS:
            await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
            return
            
        try:
            callback_parts = callback.data.split("_")
            if len(callback_parts) != 5:
                raise ValueError("Invalid callback data format")
            
            order_id = int(callback_parts[2])
            username = callback_parts[3]
            user_id = callback_parts[4]
            
            if not username or not user_id:
                raise ValueError("Missing username or user_id")
                
        except (ValueError, IndexError) as e:
            print(f"Error parsing callback data: {e}")
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return
            
        order = db.get_order(order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        if order['status'] != "pending":
            await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
            return
            
        if order['amount_star'] <= 0:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –≤ –∑–∞–∫–∞–∑–µ", show_alert=True)
            return
        
        if not db.update_order_status(order_id, "completed"):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", show_alert=True)
            return

        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order['amount_star']} Telegram –∑–≤–µ–∑–¥ –¥–ª—è @{username} –ø—Ä–∏–Ω—è—Ç!\n"
                     f"‚è≥ –ó–≤–µ–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
            )
            
            await callback.message.edit_text(
                f"{callback.message.text}\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n‚≠êÔ∏è –ó–≤–µ–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é",
                reply_markup=None
            )
            
        except Exception as e:
            print(f"Failed to send notification to user {user_id}: {e}")
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", show_alert=True)

    except Exception as e:
        print(f"Error in approve_payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@router.callback_query(F.data.startswith("reject_payment_"))
async def reject_payment(callback: CallbackQuery):
    try:
        if callback.from_user.id not in ALLOWED_TO_ADMIN_PANEL_IDS:
            await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
            return
            
        order_id = int(callback.data.split("_")[2])
        user_id = callback.data.split("_")[3]
        order = db.get_order(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        if order['status'] != "pending":
            await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
            return
        
        db.update_order_status(order_id, "rejected")
        
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order['amount_star']} Telegram –∑–≤–µ–∑–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                     f"üí≠ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                     f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã\n"
                     f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞\n"
                     f"‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n"
                     f"üë®‚Äçüíª –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Ara_stars"
            )
        except Exception as e:
            print(f"Failed to notify user {user_id}: {e}")
        
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            reply_markup=None
        )
        
    except Exception as e:
        print(f"Error in reject_payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
