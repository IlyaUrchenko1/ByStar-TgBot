from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from typing import Optional
from keyboards.user_keyboards import get_profile_keyboard, main_menu_inline
from keyboards.admin_keyboards import get_admin_home_menu, get_admin_menu

from data.requests import get_user_by_telegram_id, create_user
from utils.constants import ADMIN_IDS

router = Router(name='main')

class FilterStates(StatesGroup):
    waiting_for_filter = State()
    waiting_for_field_input = State()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    telegram_id = str(message.from_user.id)
    
    args = message.text.split()
    referrer_id = None
    if len(args) > 1:
        try:
            referrer_id = int(args[1])
        except ValueError:
            pass

    user = await get_user_by_telegram_id(telegram_id=telegram_id)
    
    if not user:
        try:
            user = await create_user(
                telegram_id=telegram_id, 
                referral_code=message.from_user.username,
                referrer_id=referrer_id
            )
            
        except Exception as e:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu_inline()
            )
            print(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            return

    await open_home(message=message, user=message.from_user, state=state)

@router.callback_query(F.data == "go_to_home")
async def go_to_home(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await open_home(callback.message, callback.from_user, state, is_callback=True)
    
@router.message(F.text.in_(["–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π üè†"]))
async def go_to_home_reply(message: Message, state: FSMContext):
    await open_home(message, message.from_user, state)
    
@router.message(F.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def go_to_home_reply(message: Message, state: FSMContext):
    await open_home(message, message.from_user, state)

async def open_home(message: Message, user, state: FSMContext, is_callback: bool = False):
    try:
        await state.clear()
        
        db_user = await get_user_by_telegram_id(telegram_id=str(user.id))
        if not db_user:
            try:
                await create_user(telegram_id=str(user.id), )
                db_user = await get_user_by_telegram_id(telegram_id=str(user.id))
                if not db_user:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            except Exception as e:
                error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n–ù–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã"
                if is_callback:
                    try:
                        await message.edit_text(error_text, reply_markup=main_menu_inline())
                    except:
                        await message.answer(error_text, reply_markup=main_menu_inline())
                else:
                    await message.answer(error_text, reply_markup=main_menu_inline())
                return
        
        if user.id in ADMIN_IDS:
            await message.answer(
                "üåü –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n",
                reply_markup=get_admin_menu()
            )
            
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_inline())
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ go_to_home: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
        if is_callback:
            try:
                await message.edit_text(error_text, reply_markup=main_menu_inline())
            except:
                await message.answer(error_text, reply_markup=main_menu_inline())
        else:
            await message.answer(error_text, reply_markup=main_menu_inline())

@router.message(F.text == "/get_id")
async def get_id(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(
        f"üÜî ID —á–∞—Ç–∞: {message.chat.id}\n"
        f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}"
    )

