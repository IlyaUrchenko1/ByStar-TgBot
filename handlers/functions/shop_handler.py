from decimal import Decimal
import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import requests
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

load_dotenv()

router = Router()
logger = logging.getLogger(__name__)

CRYPTOCLOUD_API_URL = "https://api.cryptocloud.plus/v2/invoice/create"
API_KEY = os.getenv("API_KEY")
SHOP_ID = os.getenv("SHOP_ID")

STAR_PRICES = {
    "1": 5,      # 5 USD –∑–∞ 1 –∑–≤–µ–∑–¥—É
    "5": 20,     # 20 USD –∑–∞ 5 –∑–≤–µ–∑–¥  
    "10": 35,    # 35 USD –∑–∞ 10 –∑–≤–µ–∑–¥
    "20": 60     # 60 USD –∑–∞ 20 –∑–≤–µ–∑–¥
}

@router.callback_query(F.data == "buy_stars")
async def show_star_packages(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    await callback.answer()
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text=f"‚≠ê x{stars} - ${price}", 
                                         callback_data=f"buy_stars:{stars}")
            ] for stars, price in STAR_PRICES.items()
        ]
    )
    
    await callback.message.answer(
        "üåü –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
        "–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ @CryptoCloud Plus",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("buy_stars:"))
async def process_buy_stars(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    stars = callback.data.split(":")[1]
    amount = STAR_PRICES[stars]
    
    try:
        headers = {
            "Authorization": f"Token {API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "shop_id": SHOP_ID,
            "amount": str(amount),
            "currency": "USD",
            "order_id": f"stars_{callback.from_user.id}_{int(datetime.now().timestamp())}",
            "description": f"–ü–æ–∫—É–ø–∫–∞ {stars} –∑–≤–µ–∑–¥",
            "lang": "ru"
        }
        
        response = requests.post(CRYPTOCLOUD_API_URL, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        
        if result.get("status") == "success" and result.get("result"):
            payment_data = result["result"]
            payment_link = payment_data["link"]
            payment_uuid = payment_data["uuid"]
            expiry_date = datetime.strptime(payment_data["expiry_date"], "%Y-%m-%d %H:%M:%S.%f")
            currency_info = payment_data["currency"]
            
            await state.update_data(
                payment_uuid=payment_uuid,
                stars_amount=stars,
                user_id=callback.from_user.id,
                timestamp=datetime.now().isoformat(),
                expiry_date=expiry_date.isoformat()
            )
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", 
                        url=payment_link
                    )],
                    [types.InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        callback_data=f"check_payment:{payment_uuid}"
                    )]
                ]
            )
            
            message_text = (
                f"üåü –ó–∞–∫–∞–∑ –Ω–∞ {stars} –∑–≤–µ–∑–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount}\n"
                f"üí± –í–∞–ª—é—Ç–∞: {currency_info['name']} ({currency_info['fullcode']})\n"
                f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expiry_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'"
            )
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            
        else:
            raise Exception("Failed to create invoice")
            
    except Exception as e:
        logger.error(f"Error creating payment: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment_status(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"""
    payment_uuid = callback.data.split(":")[1]
    
    try:
        url = "https://api.cryptocloud.plus/v2/invoice/info"
        headers = {
            "Authorization": f"Token {API_KEY}"
        }
        params = {
            "uuid": payment_uuid
        }

        response = requests.get(url, headers=headers, params=params)
        result = response.json()

        if response.status_code == 200 and result.get("status") == "success":
            payment_data = result["result"]
            payment_status = payment_data["status"]
            
            if payment_status == "paid":
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥
                await callback.message.edit_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n"
                    "–ó–≤–µ–∑–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
                    reply_markup=None
                )
            elif payment_status == "expired":
                await callback.message.edit_text(
                    "‚ùå –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.",
                    reply_markup=None
                )
            else:
                await callback.answer(
                    "‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
        else:
            raise Exception("Failed to check payment status")
        
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
