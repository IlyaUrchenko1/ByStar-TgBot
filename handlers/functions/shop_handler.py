from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from utils.constants import STAR_TO_RUBLE, ADMIN_IDS
from utils.database import Database

router = Router(name='shop')
db = Database()

class ShopStates(StatesGroup):
    waiting_for_stars = State()
    waiting_for_payment = State()

PAYMENT_DETAILS = """
–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:

–†–§ üá∑üá∫üí∏ 
‚ÇΩ 2200700636880774
‚Ç¨ 2200701918386050

Armenia üá¶üá≤
$ 4083060021344367
‚Ç¨ 4083060031125483

Kazakhstan üá∞üáø
‚Ç∏ 5269880009919101
"""

@router.callback_query(F.data == "buy_stars")
async def start_buy_stars(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:")
        await state.set_state(ShopStates.waiting_for_stars)
    except Exception as e:
        print(f"Error in start_buy_stars: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ShopStates.waiting_for_stars)
async def process_stars_amount(message: Message, state: FSMContext):
    try:
        stars = int(message.text)
        if stars <= 0:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥.")
            return
            
        rubles = round(stars * STAR_TO_RUBLE, 2)
        
        await state.update_data(stars=stars, rubles=rubles)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", callback_data="check_payment")]
        ])
        
        await message.answer(
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {rubles} RUB\n\n{PAYMENT_DETAILS}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
            reply_markup=keyboard
        )
        await state.set_state(ShopStates.waiting_for_payment)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥.")
    except Exception as e:
        print(f"Error in process_stars_amount: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(ShopStates.waiting_for_payment, F.data == "check_payment")
async def check_payment(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        data = await state.get_data()
        stars = data.get('stars')
        rubles = data.get('rubles')
        
        if not stars or not rubles:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        user_id = str(callback.from_user.id)
        user = db.get_user(user_id)
        
        if not user:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            await state.clear()
            return
            
        order_id = db.create_order(user['id'], stars, rubles, "pending")
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"approve_payment_{order_id}"),
                InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_payment_{order_id}")
            ],
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§", url=f"tg://user?id={user_id}")]
        ])
        
        admin_message = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥!\n\n"
            f"–û—Ç: {callback.from_user.mention_html()}\n"
            f"ID: {user_id}\n"
            f"–ó–≤–µ–∑–¥: {stars}\n"
            f"–°—É–º–º–∞: {rubles} RUB"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await callback.bot.send_message(
                    admin_id,
                    admin_message,
                    reply_markup=admin_keyboard,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"Failed to notify admin {admin_id}: {e}")
        
        await callback.message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        await state.clear()
        
    except Exception as e:
        print(f"Error in check_payment: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("approve_payment_"))
async def approve_payment(callback: CallbackQuery):
    try:
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
            return
            
        order_id = int(callback.data.split("_")[2])
        order = db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        if order['status'] != "pending":
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
            return
        
        db.update_order_status(order_id, "completed")
        user = db.get_user(str(order['user_id']))
        
        if user:
            db.update_user_balance(str(user['telegram_id']), order['amount_star'])
            try:
                await callback.bot.send_message(
                    user['telegram_id'],
                    f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order['amount_star']} –∑–≤–µ–∑–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                    f"–ó–≤–µ–∑–¥—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
                )
            except Exception as e:
                print(f"Failed to notify user {user['telegram_id']}: {e}")
        
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            reply_markup=None
        )
        
    except Exception as e:
        print(f"Error in approve_payment: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@router.callback_query(F.data.startswith("reject_payment_"))
async def reject_payment(callback: CallbackQuery):
    try:
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
            return
            
        order_id = int(callback.data.split("_")[2])
        order = db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        if order['status'] != "pending":
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
            return
        
        db.update_order_status(order_id, "rejected")
        
        try:
            await callback.bot.send_message(
                order['user_id'],
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order['amount_star']} –∑–≤–µ–∑–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            print(f"Failed to notify user {order['user_id']}: {e}")
        
        await callback.message.edit_text(
            callback.message.text + "\n\n‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            reply_markup=None
        )
        
    except Exception as e:
        print(f"Error in reject_payment: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
